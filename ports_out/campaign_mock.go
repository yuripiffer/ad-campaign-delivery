// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ports_out

import (
	"ad-campaign-delivery/model"
	"context"
	"sync"
)

// Ensure, that CampaignRepositoryMock does implement CampaignRepository.
// If this is not the case, regenerate this file with moq.
var _ CampaignRepository = &CampaignRepositoryMock{}

// CampaignRepositoryMock is a mock implementation of CampaignRepository.
//
//	func TestSomethingThatUsesCampaignRepository(t *testing.T) {
//
//		// make and configure a mocked CampaignRepository
//		mockedCampaignRepository := &CampaignRepositoryMock{
//			CreateCampaignFunc: func(ctx context.Context, campaign model.Campaign) error {
//				panic("mock out the CreateCampaign method")
//			},
//			MatchCampaignFunc: func(ctx context.Context, country model.Country, device model.Device, os model.OS) (*model.BidLookup, error) {
//				panic("mock out the MatchCampaign method")
//			},
//		}
//
//		// use mockedCampaignRepository in code that requires CampaignRepository
//		// and then make assertions.
//
//	}
type CampaignRepositoryMock struct {
	// CreateCampaignFunc mocks the CreateCampaign method.
	CreateCampaignFunc func(ctx context.Context, campaign model.Campaign) error

	// MatchCampaignFunc mocks the MatchCampaign method.
	MatchCampaignFunc func(ctx context.Context, country model.Country, device model.Device, os model.OS) (*model.BidLookup, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateCampaign holds details about calls to the CreateCampaign method.
		CreateCampaign []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Campaign is the campaign argument value.
			Campaign model.Campaign
		}
		// MatchCampaign holds details about calls to the MatchCampaign method.
		MatchCampaign []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Country is the country argument value.
			Country model.Country
			// Device is the device argument value.
			Device model.Device
			// Os is the os argument value.
			Os model.OS
		}
	}
	lockCreateCampaign sync.RWMutex
	lockMatchCampaign  sync.RWMutex
}

// CreateCampaign calls CreateCampaignFunc.
func (mock *CampaignRepositoryMock) CreateCampaign(ctx context.Context, campaign model.Campaign) error {
	callInfo := struct {
		Ctx      context.Context
		Campaign model.Campaign
	}{
		Ctx:      ctx,
		Campaign: campaign,
	}
	mock.lockCreateCampaign.Lock()
	mock.calls.CreateCampaign = append(mock.calls.CreateCampaign, callInfo)
	mock.lockCreateCampaign.Unlock()
	if mock.CreateCampaignFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateCampaignFunc(ctx, campaign)
}

// CreateCampaignCalls gets all the calls that were made to CreateCampaign.
// Check the length with:
//
//	len(mockedCampaignRepository.CreateCampaignCalls())
func (mock *CampaignRepositoryMock) CreateCampaignCalls() []struct {
	Ctx      context.Context
	Campaign model.Campaign
} {
	var calls []struct {
		Ctx      context.Context
		Campaign model.Campaign
	}
	mock.lockCreateCampaign.RLock()
	calls = mock.calls.CreateCampaign
	mock.lockCreateCampaign.RUnlock()
	return calls
}

// MatchCampaign calls MatchCampaignFunc.
func (mock *CampaignRepositoryMock) MatchCampaign(ctx context.Context, country model.Country, device model.Device, os model.OS) (*model.BidLookup, error) {
	callInfo := struct {
		Ctx     context.Context
		Country model.Country
		Device  model.Device
		Os      model.OS
	}{
		Ctx:     ctx,
		Country: country,
		Device:  device,
		Os:      os,
	}
	mock.lockMatchCampaign.Lock()
	mock.calls.MatchCampaign = append(mock.calls.MatchCampaign, callInfo)
	mock.lockMatchCampaign.Unlock()
	if mock.MatchCampaignFunc == nil {
		var (
			bidLookupOut *model.BidLookup
			errOut       error
		)
		return bidLookupOut, errOut
	}
	return mock.MatchCampaignFunc(ctx, country, device, os)
}

// MatchCampaignCalls gets all the calls that were made to MatchCampaign.
// Check the length with:
//
//	len(mockedCampaignRepository.MatchCampaignCalls())
func (mock *CampaignRepositoryMock) MatchCampaignCalls() []struct {
	Ctx     context.Context
	Country model.Country
	Device  model.Device
	Os      model.OS
} {
	var calls []struct {
		Ctx     context.Context
		Country model.Country
		Device  model.Device
		Os      model.OS
	}
	mock.lockMatchCampaign.RLock()
	calls = mock.calls.MatchCampaign
	mock.lockMatchCampaign.RUnlock()
	return calls
}
