// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ports_in

import (
	"ad-campaign-delivery/model"
	"context"
	"sync"
)

// Ensure, that CampaignServiceMock does implement CampaignService.
// If this is not the case, regenerate this file with moq.
var _ CampaignService = &CampaignServiceMock{}

// CampaignServiceMock is a mock implementation of CampaignService.
//
//	func TestSomethingThatUsesCampaignService(t *testing.T) {
//
//		// make and configure a mocked CampaignService
//		mockedCampaignService := &CampaignServiceMock{
//			CreateFunc: func(ctx context.Context, user model.Campaign, activeDays int) error {
//				panic("mock out the Create method")
//			},
//			DeactivateExpiredCampaignsFunc: func()  {
//				panic("mock out the DeactivateExpiredCampaigns method")
//			},
//			MatchFunc: func(ctx context.Context, country model.Country, device model.Device, os model.OS) (*model.BidLookup, error) {
//				panic("mock out the Match method")
//			},
//		}
//
//		// use mockedCampaignService in code that requires CampaignService
//		// and then make assertions.
//
//	}
type CampaignServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, user model.Campaign, activeDays int) error

	// DeactivateExpiredCampaignsFunc mocks the DeactivateExpiredCampaigns method.
	DeactivateExpiredCampaignsFunc func()

	// MatchFunc mocks the Match method.
	MatchFunc func(ctx context.Context, country model.Country, device model.Device, os model.OS) (*model.BidLookup, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User model.Campaign
			// ActiveDays is the activeDays argument value.
			ActiveDays int
		}
		// DeactivateExpiredCampaigns holds details about calls to the DeactivateExpiredCampaigns method.
		DeactivateExpiredCampaigns []struct {
		}
		// Match holds details about calls to the Match method.
		Match []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Country is the country argument value.
			Country model.Country
			// Device is the device argument value.
			Device model.Device
			// Os is the os argument value.
			Os model.OS
		}
	}
	lockCreate                     sync.RWMutex
	lockDeactivateExpiredCampaigns sync.RWMutex
	lockMatch                      sync.RWMutex
}

// Create calls CreateFunc.
func (mock *CampaignServiceMock) Create(ctx context.Context, user model.Campaign, activeDays int) error {
	callInfo := struct {
		Ctx        context.Context
		User       model.Campaign
		ActiveDays int
	}{
		Ctx:        ctx,
		User:       user,
		ActiveDays: activeDays,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	if mock.CreateFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateFunc(ctx, user, activeDays)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedCampaignService.CreateCalls())
func (mock *CampaignServiceMock) CreateCalls() []struct {
	Ctx        context.Context
	User       model.Campaign
	ActiveDays int
} {
	var calls []struct {
		Ctx        context.Context
		User       model.Campaign
		ActiveDays int
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// DeactivateExpiredCampaigns calls DeactivateExpiredCampaignsFunc.
func (mock *CampaignServiceMock) DeactivateExpiredCampaigns() {
	callInfo := struct {
	}{}
	mock.lockDeactivateExpiredCampaigns.Lock()
	mock.calls.DeactivateExpiredCampaigns = append(mock.calls.DeactivateExpiredCampaigns, callInfo)
	mock.lockDeactivateExpiredCampaigns.Unlock()
	if mock.DeactivateExpiredCampaignsFunc == nil {
		return
	}
	mock.DeactivateExpiredCampaignsFunc()
}

// DeactivateExpiredCampaignsCalls gets all the calls that were made to DeactivateExpiredCampaigns.
// Check the length with:
//
//	len(mockedCampaignService.DeactivateExpiredCampaignsCalls())
func (mock *CampaignServiceMock) DeactivateExpiredCampaignsCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockDeactivateExpiredCampaigns.RLock()
	calls = mock.calls.DeactivateExpiredCampaigns
	mock.lockDeactivateExpiredCampaigns.RUnlock()
	return calls
}

// Match calls MatchFunc.
func (mock *CampaignServiceMock) Match(ctx context.Context, country model.Country, device model.Device, os model.OS) (*model.BidLookup, error) {
	callInfo := struct {
		Ctx     context.Context
		Country model.Country
		Device  model.Device
		Os      model.OS
	}{
		Ctx:     ctx,
		Country: country,
		Device:  device,
		Os:      os,
	}
	mock.lockMatch.Lock()
	mock.calls.Match = append(mock.calls.Match, callInfo)
	mock.lockMatch.Unlock()
	if mock.MatchFunc == nil {
		var (
			bidLookupOut *model.BidLookup
			errOut       error
		)
		return bidLookupOut, errOut
	}
	return mock.MatchFunc(ctx, country, device, os)
}

// MatchCalls gets all the calls that were made to Match.
// Check the length with:
//
//	len(mockedCampaignService.MatchCalls())
func (mock *CampaignServiceMock) MatchCalls() []struct {
	Ctx     context.Context
	Country model.Country
	Device  model.Device
	Os      model.OS
} {
	var calls []struct {
		Ctx     context.Context
		Country model.Country
		Device  model.Device
		Os      model.OS
	}
	mock.lockMatch.RLock()
	calls = mock.calls.Match
	mock.lockMatch.RUnlock()
	return calls
}
