// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/campaigns": {
            "post": {
                "description": "A campaign and a bid lookup will be created with the provided fields.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "Create a new campaign",
                "parameters": [
                    {
                        "description": "Campaign create request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/web.CampaignCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Campaign created (no content)"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/pkg.ErrorResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg.ErrorResp"
                        }
                    }
                }
            }
        },
        "/campaigns/match": {
            "post": {
                "description": "Matches a campaign based on country, device, and OS, after validating consent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "Match a campaign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Consent string",
                        "name": "X-Consent-String",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Campaign match request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/web.CampaignMatchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Matched campaign",
                        "schema": {
                            "$ref": "#/definitions/web.CampaignMatchResponse"
                        }
                    },
                    "204": {
                        "description": "No matching campaign found"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/pkg.ErrorResp"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/pkg.ErrorResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "pkg.ErrorResp": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "errors": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "web.CampaignCreateRequest": {
            "type": "object",
            "properties": {
                "active_days": {
                    "type": "integer"
                },
                "bid": {
                    "type": "number"
                },
                "budget": {
                    "type": "number"
                },
                "country": {
                    "type": "string"
                },
                "device": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                }
            }
        },
        "web.CampaignMatchRequest": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "device": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                }
            }
        },
        "web.CampaignMatchResponse": {
            "type": "object",
            "properties": {
                "bid": {
                    "type": "number"
                },
                "campaign_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
